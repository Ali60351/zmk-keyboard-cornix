/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "zmk-helpers/helper.h"
#include "includes/cornix54.h"

// tap windows for ctl alt and gui

#define HM_TAPPING_TERM 250
#define HM_TAPPING_REPEAT 210

// quick tapping for shift

#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 70
#define BASE 0
#define WIN 1
#define LOWER 2
#define RAISE 3
#define ADJUST 4
#define NAVI   5
#define NUM    6
#define DEBUG  7

// https://github.com/urob/zmk-config/tree/main#timeless-homerow-mods

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH1 LH0 RH0 RH1
#define KEYS_T LH1 LH0 RH0 RH1
#define ZMK_POINTING_DEFAULT_SCRL_VAL 15

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    // Activate ADJUST layer by pressing raise and lower

    behaviors {
        u_mt: u_mt {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        u_lt: u_lt {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;                // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };

        // Positional Homerow mods for shift
        // Use faster tapping term and disable some features that may
        // cause false negatives.

        hm_shift_l: hm_shift_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            //flavor = "balanced";

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_shift_r: hm_shift_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;

            // for quick tapping; shift+~

            hold-trigger-on-release;
        };

        /*
         * Non-Positional Homerow Mods
         * Used for &mm_grescm_gui behavior on left hand.
         *
         * Usage: &hm LSHFT T
         * Tap: T
         * Tap-Tap-Hold: Repeat T
         * Hold: LSHIFT
         */

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;
        };

        lt: layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;

            flavor = "hold-preferred";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjust_layer {
            if-layers = <1 1>;
            then-layer = <1>;
        };
    };

    combos {
        compatible = "zmk,combos";

        cb_ltm {
            bindings = <&kp ESC>;
            key-positions = <2 4>;
            layers = <0>;
        };

        cb_lm {
            bindings = <&kp TAB>;
            key-positions = <14 16>;
            layers = <0>;
        };

        cb_enter {
            bindings = <&kp RET>;
            key-positions = <21 19>;
            layers = <0>;
        };

        layer3 {
            bindings = <&kp N3>;
            key-positions = <5 6>;
        };

        layer4 {
            bindings = <&kp N4>;
            key-positions = <5 6>;
        };
    };

    macros {
        Term: Term {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RCTRL &kp GRAVE>;
            label = "TERM";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            display-name = "Base";

            // ------------------------------------------------------------------------------------------------------------
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&mt ESCAPE GRAVE  &kp Q          &kp W                 &kp F             &kp P                &kp B                        &kp J          &kp L                &kp U              &kp Y              &kp SEMI       &kp BSLH
&kp TAB           &hm_l LCTRL A  &hm_l LEFT_COMMAND R  &hm_l LEFT_ALT S  &hm_shift_l LSHFT T  &kp G                        &kp M          &hm_shift_r RSHFT N  &hm_r RIGHT_ALT E  &hm_r RIGHT_GUI I  &hm_r RCTRL O  &kp SQT
&kp LEFT_SHIFT    &kp Z          &kp X                 &kp C             &kp V                &kp B          &none  &none  &kp K          &kp H                &kp COMMA          &kp DOT            &kp UP         &kp SLASH
&none             &none          &Term                 &kp ESCAPE        &kp TAB              &u_lt 1 SPACE                &u_lt 2 ENTER  &u_lt 3 BACKSPACE    &u_lt 4 DEL        &kp LEFT           &kp DOWN       &kp RIGHT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        NAVIGATION {
            bindings = <
&trans  &trans     &trans    &trans    &trans     &trans                  &kp K_REDO    &kp K_PASTE  &kp K_COPY   &kp K_CUT    &kp K_UNDO  &trans
&trans  &kp LCTRL  &kp LGUI  &kp LALT  &kp LSHFT  &trans                  &kp CAPSLOCK  &kp LEFT     &kp DOWN     &kp UP       &kp RIGHT   &trans
&trans  &trans     &trans    &trans    &trans     &trans  &trans  &trans  &kp INS       &kp HOME     &kp PAGE_UP  &kp PAGE_UP  &kp END     &trans
&trans  &trans     &trans    &trans    &trans     &trans                  &trans        &trans       &trans       &trans       &trans      &trans
            >;

            label = "Nav";
            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp PG_UP PG_DN>;
        };

        NUMBER {
            bindings = <
&kp LBKT   &kp N7  &kp N8  &kp N9   &kp RBKT   &trans                     &trans  &trans     &trans    &trans    &trans     &trans
&kp SEMI   &kp N4  &kp N5  &kp N6   &kp EQUAL  &trans                     &trans  &kp RSHFT  &kp RALT  &kp RGUI  &kp RCTRL  &trans
&kp GRAVE  &kp N1  &kp N2  &kp N3   &kp BSLH   &trans     &trans  &trans  &trans  &trans     &trans    &trans    &trans     &trans
&trans     &trans  &trans  &kp DOT  &kp N0     &kp MINUS                  &trans  &trans     &trans    &trans    &trans     &trans
            >;

            label = "Num";
        };

        SYMBOL {
            bindings = <
&kp LS(LBKT)   &kp LS(N7)  &kp LS(N8)  &kp LS(N9)   &kp LS(RBKT)   &trans                         &trans  &trans     &trans    &trans    &trans     &trans
&kp LS(SEMI)   &kp LS(N4)  &kp LS(N5)  &kp LS(N6)   &kp LS(EQUAL)  &trans                         &trans  &kp RSHFT  &kp RALT  &kp RGUI  &kp RCTRL  &trans
&kp LS(GRAVE)  &kp LS(N1)  &kp LS(N2)  &kp LS(N3)   &kp LS(BSLH)   &trans         &trans  &trans  &trans  &trans     &trans    &trans    &trans     &trans
&trans         &trans      &trans      &kp LS(DOT)  &kp LS(N0)     &kp LS(MINUS)                  &trans  &trans     &trans    &trans    &trans     &trans
            >;

            label = "Sym";
        };

        FUNCTION {
            bindings = <
&kp PRINTSCREEN  &kp F9  &kp F10  &kp F11     &kp F12    &trans                   &trans  &trans     &trans    &trans    &trans     &trans
&kp SCROLLLOCK   &kp F5  &kp F6   &kp F7      &kp F8     &trans                   &trans  &kp RSHFT  &kp RALT  &kp RGUI  &kp RCTRL  &trans
&kp PAUSE_BREAK  &kp F1  &kp F2   &kp F3      &kp F4     &trans   &trans  &trans  &trans  &trans     &trans    &trans    &trans     &trans
&trans           &trans  &trans   &kp K_MENU  &kp SPACE  &kp TAB                  &trans  &trans     &trans    &trans    &trans     &trans
            >;

            label = "Fun";
        };
    };
};
